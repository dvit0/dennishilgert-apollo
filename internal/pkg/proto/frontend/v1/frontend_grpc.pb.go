// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: apollo/proto/frontend/v1/frontend.proto

package frontendpb

import (
	context "context"
	v1 "github.com/dennishilgert/apollo/internal/pkg/proto/fleet/v1"
	v11 "github.com/dennishilgert/apollo/internal/pkg/proto/shared/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Frontend_InvokeFunction_FullMethodName          = "/apollo.proto.frontend.v1.Frontend/InvokeFunction"
	Frontend_AddKernel_FullMethodName               = "/apollo.proto.frontend.v1.Frontend/AddKernel"
	Frontend_ListKernels_FullMethodName             = "/apollo.proto.frontend.v1.Frontend/ListKernels"
	Frontend_RemoveKernel_FullMethodName            = "/apollo.proto.frontend.v1.Frontend/RemoveKernel"
	Frontend_AddRuntime_FullMethodName              = "/apollo.proto.frontend.v1.Frontend/AddRuntime"
	Frontend_ListRuntimes_FullMethodName            = "/apollo.proto.frontend.v1.Frontend/ListRuntimes"
	Frontend_RemoveRuntime_FullMethodName           = "/apollo.proto.frontend.v1.Frontend/RemoveRuntime"
	Frontend_CreateFunction_FullMethodName          = "/apollo.proto.frontend.v1.Frontend/CreateFunction"
	Frontend_GetFunction_FullMethodName             = "/apollo.proto.frontend.v1.Frontend/GetFunction"
	Frontend_ListFunctions_FullMethodName           = "/apollo.proto.frontend.v1.Frontend/ListFunctions"
	Frontend_FunctionCodeUploadUrl_FullMethodName   = "/apollo.proto.frontend.v1.Frontend/FunctionCodeUploadUrl"
	Frontend_UpdateFunctionRuntime_FullMethodName   = "/apollo.proto.frontend.v1.Frontend/UpdateFunctionRuntime"
	Frontend_UpdateFunctionResources_FullMethodName = "/apollo.proto.frontend.v1.Frontend/UpdateFunctionResources"
	Frontend_DeleteFunction_FullMethodName          = "/apollo.proto.frontend.v1.Frontend/DeleteFunction"
)

// FrontendClient is the client API for Frontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendClient interface {
	InvokeFunction(ctx context.Context, in *InvokeFunctionRequest, opts ...grpc.CallOption) (*v1.InvokeFunctionResponse, error)
	AddKernel(ctx context.Context, in *AddKernelRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error)
	ListKernels(ctx context.Context, in *ListKernelsRequest, opts ...grpc.CallOption) (*ListKernelsResponse, error)
	RemoveKernel(ctx context.Context, in *RemoveKernelRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error)
	AddRuntime(ctx context.Context, in *AddRuntimeRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error)
	ListRuntimes(ctx context.Context, in *ListRuntimesRequest, opts ...grpc.CallOption) (*ListRuntimesResponse, error)
	RemoveRuntime(ctx context.Context, in *RemoveRuntimeRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error)
	CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error)
	GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error)
	ListFunctions(ctx context.Context, in *ListFunctionsRequest, opts ...grpc.CallOption) (*ListFunctionsResponse, error)
	FunctionCodeUploadUrl(ctx context.Context, in *FunctionCodeUploadUrlRequest, opts ...grpc.CallOption) (*FunctionCodeUploadUrlResponse, error)
	UpdateFunctionRuntime(ctx context.Context, in *UpdateFunctionRuntimeRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error)
	UpdateFunctionResources(ctx context.Context, in *UpdateFunctionResourcesRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error)
	DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error)
}

type frontendClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendClient(cc grpc.ClientConnInterface) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) InvokeFunction(ctx context.Context, in *InvokeFunctionRequest, opts ...grpc.CallOption) (*v1.InvokeFunctionResponse, error) {
	out := new(v1.InvokeFunctionResponse)
	err := c.cc.Invoke(ctx, Frontend_InvokeFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) AddKernel(ctx context.Context, in *AddKernelRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error) {
	out := new(v11.EmptyResponse)
	err := c.cc.Invoke(ctx, Frontend_AddKernel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ListKernels(ctx context.Context, in *ListKernelsRequest, opts ...grpc.CallOption) (*ListKernelsResponse, error) {
	out := new(ListKernelsResponse)
	err := c.cc.Invoke(ctx, Frontend_ListKernels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) RemoveKernel(ctx context.Context, in *RemoveKernelRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error) {
	out := new(v11.EmptyResponse)
	err := c.cc.Invoke(ctx, Frontend_RemoveKernel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) AddRuntime(ctx context.Context, in *AddRuntimeRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error) {
	out := new(v11.EmptyResponse)
	err := c.cc.Invoke(ctx, Frontend_AddRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ListRuntimes(ctx context.Context, in *ListRuntimesRequest, opts ...grpc.CallOption) (*ListRuntimesResponse, error) {
	out := new(ListRuntimesResponse)
	err := c.cc.Invoke(ctx, Frontend_ListRuntimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) RemoveRuntime(ctx context.Context, in *RemoveRuntimeRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error) {
	out := new(v11.EmptyResponse)
	err := c.cc.Invoke(ctx, Frontend_RemoveRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error) {
	out := new(CreateFunctionResponse)
	err := c.cc.Invoke(ctx, Frontend_CreateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error) {
	out := new(GetFunctionResponse)
	err := c.cc.Invoke(ctx, Frontend_GetFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ListFunctions(ctx context.Context, in *ListFunctionsRequest, opts ...grpc.CallOption) (*ListFunctionsResponse, error) {
	out := new(ListFunctionsResponse)
	err := c.cc.Invoke(ctx, Frontend_ListFunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) FunctionCodeUploadUrl(ctx context.Context, in *FunctionCodeUploadUrlRequest, opts ...grpc.CallOption) (*FunctionCodeUploadUrlResponse, error) {
	out := new(FunctionCodeUploadUrlResponse)
	err := c.cc.Invoke(ctx, Frontend_FunctionCodeUploadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) UpdateFunctionRuntime(ctx context.Context, in *UpdateFunctionRuntimeRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error) {
	out := new(v11.EmptyResponse)
	err := c.cc.Invoke(ctx, Frontend_UpdateFunctionRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) UpdateFunctionResources(ctx context.Context, in *UpdateFunctionResourcesRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error) {
	out := new(v11.EmptyResponse)
	err := c.cc.Invoke(ctx, Frontend_UpdateFunctionResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*v11.EmptyResponse, error) {
	out := new(v11.EmptyResponse)
	err := c.cc.Invoke(ctx, Frontend_DeleteFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServer is the server API for Frontend service.
// All implementations should embed UnimplementedFrontendServer
// for forward compatibility
type FrontendServer interface {
	InvokeFunction(context.Context, *InvokeFunctionRequest) (*v1.InvokeFunctionResponse, error)
	AddKernel(context.Context, *AddKernelRequest) (*v11.EmptyResponse, error)
	ListKernels(context.Context, *ListKernelsRequest) (*ListKernelsResponse, error)
	RemoveKernel(context.Context, *RemoveKernelRequest) (*v11.EmptyResponse, error)
	AddRuntime(context.Context, *AddRuntimeRequest) (*v11.EmptyResponse, error)
	ListRuntimes(context.Context, *ListRuntimesRequest) (*ListRuntimesResponse, error)
	RemoveRuntime(context.Context, *RemoveRuntimeRequest) (*v11.EmptyResponse, error)
	CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error)
	GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error)
	ListFunctions(context.Context, *ListFunctionsRequest) (*ListFunctionsResponse, error)
	FunctionCodeUploadUrl(context.Context, *FunctionCodeUploadUrlRequest) (*FunctionCodeUploadUrlResponse, error)
	UpdateFunctionRuntime(context.Context, *UpdateFunctionRuntimeRequest) (*v11.EmptyResponse, error)
	UpdateFunctionResources(context.Context, *UpdateFunctionResourcesRequest) (*v11.EmptyResponse, error)
	DeleteFunction(context.Context, *DeleteFunctionRequest) (*v11.EmptyResponse, error)
}

// UnimplementedFrontendServer should be embedded to have forward compatible implementations.
type UnimplementedFrontendServer struct {
}

func (UnimplementedFrontendServer) InvokeFunction(context.Context, *InvokeFunctionRequest) (*v1.InvokeFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeFunction not implemented")
}
func (UnimplementedFrontendServer) AddKernel(context.Context, *AddKernelRequest) (*v11.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKernel not implemented")
}
func (UnimplementedFrontendServer) ListKernels(context.Context, *ListKernelsRequest) (*ListKernelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKernels not implemented")
}
func (UnimplementedFrontendServer) RemoveKernel(context.Context, *RemoveKernelRequest) (*v11.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKernel not implemented")
}
func (UnimplementedFrontendServer) AddRuntime(context.Context, *AddRuntimeRequest) (*v11.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRuntime not implemented")
}
func (UnimplementedFrontendServer) ListRuntimes(context.Context, *ListRuntimesRequest) (*ListRuntimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuntimes not implemented")
}
func (UnimplementedFrontendServer) RemoveRuntime(context.Context, *RemoveRuntimeRequest) (*v11.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRuntime not implemented")
}
func (UnimplementedFrontendServer) CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedFrontendServer) GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunction not implemented")
}
func (UnimplementedFrontendServer) ListFunctions(context.Context, *ListFunctionsRequest) (*ListFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedFrontendServer) FunctionCodeUploadUrl(context.Context, *FunctionCodeUploadUrlRequest) (*FunctionCodeUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionCodeUploadUrl not implemented")
}
func (UnimplementedFrontendServer) UpdateFunctionRuntime(context.Context, *UpdateFunctionRuntimeRequest) (*v11.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunctionRuntime not implemented")
}
func (UnimplementedFrontendServer) UpdateFunctionResources(context.Context, *UpdateFunctionResourcesRequest) (*v11.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunctionResources not implemented")
}
func (UnimplementedFrontendServer) DeleteFunction(context.Context, *DeleteFunctionRequest) (*v11.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}

// UnsafeFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServer will
// result in compilation errors.
type UnsafeFrontendServer interface {
	mustEmbedUnimplementedFrontendServer()
}

func RegisterFrontendServer(s grpc.ServiceRegistrar, srv FrontendServer) {
	s.RegisterService(&Frontend_ServiceDesc, srv)
}

func _Frontend_InvokeFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).InvokeFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_InvokeFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).InvokeFunction(ctx, req.(*InvokeFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_AddKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKernelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).AddKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_AddKernel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).AddKernel(ctx, req.(*AddKernelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ListKernels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKernelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ListKernels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_ListKernels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ListKernels(ctx, req.(*ListKernelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_RemoveKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKernelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).RemoveKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_RemoveKernel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).RemoveKernel(ctx, req.(*RemoveKernelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_AddRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).AddRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_AddRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).AddRuntime(ctx, req.(*AddRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ListRuntimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuntimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ListRuntimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_ListRuntimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ListRuntimes(ctx, req.(*ListRuntimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_RemoveRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).RemoveRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_RemoveRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).RemoveRuntime(ctx, req.(*RemoveRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_CreateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreateFunction(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_GetFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).GetFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_GetFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).GetFunction(ctx, req.(*GetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_ListFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ListFunctions(ctx, req.(*ListFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_FunctionCodeUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCodeUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).FunctionCodeUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_FunctionCodeUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).FunctionCodeUploadUrl(ctx, req.(*FunctionCodeUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_UpdateFunctionRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFunctionRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).UpdateFunctionRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_UpdateFunctionRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).UpdateFunctionRuntime(ctx, req.(*UpdateFunctionRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_UpdateFunctionResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFunctionResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).UpdateFunctionResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_UpdateFunctionResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).UpdateFunctionResources(ctx, req.(*UpdateFunctionResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Frontend_DeleteFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteFunction(ctx, req.(*DeleteFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Frontend_ServiceDesc is the grpc.ServiceDesc for Frontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.proto.frontend.v1.Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeFunction",
			Handler:    _Frontend_InvokeFunction_Handler,
		},
		{
			MethodName: "AddKernel",
			Handler:    _Frontend_AddKernel_Handler,
		},
		{
			MethodName: "ListKernels",
			Handler:    _Frontend_ListKernels_Handler,
		},
		{
			MethodName: "RemoveKernel",
			Handler:    _Frontend_RemoveKernel_Handler,
		},
		{
			MethodName: "AddRuntime",
			Handler:    _Frontend_AddRuntime_Handler,
		},
		{
			MethodName: "ListRuntimes",
			Handler:    _Frontend_ListRuntimes_Handler,
		},
		{
			MethodName: "RemoveRuntime",
			Handler:    _Frontend_RemoveRuntime_Handler,
		},
		{
			MethodName: "CreateFunction",
			Handler:    _Frontend_CreateFunction_Handler,
		},
		{
			MethodName: "GetFunction",
			Handler:    _Frontend_GetFunction_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _Frontend_ListFunctions_Handler,
		},
		{
			MethodName: "FunctionCodeUploadUrl",
			Handler:    _Frontend_FunctionCodeUploadUrl_Handler,
		},
		{
			MethodName: "UpdateFunctionRuntime",
			Handler:    _Frontend_UpdateFunctionRuntime_Handler,
		},
		{
			MethodName: "UpdateFunctionResources",
			Handler:    _Frontend_UpdateFunctionResources_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _Frontend_DeleteFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo/proto/frontend/v1/frontend.proto",
}
