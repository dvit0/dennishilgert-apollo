syntax = "proto3";

package apollo.proto.registry.v1;

import "google/protobuf/struct.proto";
import "apollo/proto/shared/v1/shared.proto";

option go_package = "github.com/dennishilgert/apollo/pkg/proto/registry/v1;registrypb";

service ServiceRegistry {
  rpc AcquireLease(AcquireLeaseRequest) returns (apollo.proto.shared.v1.EmptyResponse) {}
  rpc ReleaseLease(ReleaseLeaseRequest) returns (apollo.proto.shared.v1.EmptyResponse) {}
  rpc AvailableServiceInstance(AvailableInstanceRequest) returns (AvailableInstanceResponse) {}
}

enum InstanceType {
  INSTANCE_TYPE_UNSPECIFIED = 0;
  FLEET_MANAGER = 1;
  WORKER_MANAGER = 2;
}

message Function {
  string uuid = 1;
}

message ServiceInstance {
  string instance_uuid = 1;
  InstanceType instance_type = 2;
  string host = 4;
  int32 port = 5;
  google.protobuf.Struct metadata = 6;
}

message WorkerInstance {
  string worker_uuid = 1;
  string architecture = 2;
  string host = 3;
  int32 port = 4;
  repeated Function initialized_functions = 5;
}

message ServiceInstanceMetrics {
  int32 cpu_usage = 1;
  int32 memory_usage = 2;
}

message WorkerInstanceMetrics {
  int32 cpu_usage = 1;
  int32 memory_usage = 2;
  int32 storage_usage = 3;
  int32 light_functions_load = 4;
  int32 medium_functions_load = 5;
  int32 heavy_functions_load = 6;
}

message AcquireLeaseRequest {
  oneof instance {
    ServiceInstance service_instance = 1;
    WorkerInstance worker_instance = 2;
  }
  oneof metrics {
    ServiceInstanceMetrics service_instance_metrics = 3;
    WorkerInstanceMetrics worker_instance_metrics = 4;
  }
}

message ReleaseLeaseRequest {
  string instance_uuid = 1;
  InstanceType instance_type = 2;
}

message AvailableInstanceRequest {
  InstanceType instance_type = 1;
}

message AvailableInstanceResponse {
  ServiceInstance instance = 1;
}