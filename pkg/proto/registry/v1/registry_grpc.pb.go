// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: apollo/proto/registry/v1/registry.proto

package registrypb

import (
	context "context"
	v1 "github.com/dennishilgert/apollo/pkg/proto/shared/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceRegistry_Acquire_FullMethodName = "/apollo.proto.registry.v1.ServiceRegistry/Acquire"
	ServiceRegistry_Release_FullMethodName = "/apollo.proto.registry.v1.ServiceRegistry/Release"
)

// ServiceRegistryClient is the client API for ServiceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRegistryClient interface {
	Acquire(ctx context.Context, in *AcquireLeaseRequest, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	Release(ctx context.Context, in *ReleaseLeaseRequest, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
}

type serviceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistryClient(cc grpc.ClientConnInterface) ServiceRegistryClient {
	return &serviceRegistryClient{cc}
}

func (c *serviceRegistryClient) Acquire(ctx context.Context, in *AcquireLeaseRequest, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, ServiceRegistry_Acquire_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) Release(ctx context.Context, in *ReleaseLeaseRequest, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, ServiceRegistry_Release_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRegistryServer is the server API for ServiceRegistry service.
// All implementations should embed UnimplementedServiceRegistryServer
// for forward compatibility
type ServiceRegistryServer interface {
	Acquire(context.Context, *AcquireLeaseRequest) (*v1.EmptyResponse, error)
	Release(context.Context, *ReleaseLeaseRequest) (*v1.EmptyResponse, error)
}

// UnimplementedServiceRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedServiceRegistryServer struct {
}

func (UnimplementedServiceRegistryServer) Acquire(context.Context, *AcquireLeaseRequest) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acquire not implemented")
}
func (UnimplementedServiceRegistryServer) Release(context.Context, *ReleaseLeaseRequest) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

// UnsafeServiceRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRegistryServer will
// result in compilation errors.
type UnsafeServiceRegistryServer interface {
	mustEmbedUnimplementedServiceRegistryServer()
}

func RegisterServiceRegistryServer(s grpc.ServiceRegistrar, srv ServiceRegistryServer) {
	s.RegisterService(&ServiceRegistry_ServiceDesc, srv)
}

func _ServiceRegistry_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistry_Acquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).Acquire(ctx, req.(*AcquireLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistry_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).Release(ctx, req.(*ReleaseLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceRegistry_ServiceDesc is the grpc.ServiceDesc for ServiceRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.proto.registry.v1.ServiceRegistry",
	HandlerType: (*ServiceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acquire",
			Handler:    _ServiceRegistry_Acquire_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _ServiceRegistry_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo/proto/registry/v1/registry.proto",
}
